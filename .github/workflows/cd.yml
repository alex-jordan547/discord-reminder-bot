name: CD - Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch: # Allow manual deployment
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment != '')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYY-MM-DD'}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
    
    - name: Generate deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Pushed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Alternative deployment using Docker Hub (if preferred)
  build-dockerhub:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    if: false  # Disabled by default, set to true if you prefer Docker Hub
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/discord-reminder-bot
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "üîÑ Deploying to staging environment"
        echo "Image: ${{ needs.build-and-push.outputs.image }}"
        echo "This would trigger staging deployment"
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        # Create a deployment package with docker-compose and configs
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp .env.example deployment/env.template
        
        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        IMAGE_NAME="${1:-${{ needs.build-and-push.outputs.image }}}"
        
        echo "üöÄ Starting deployment of Discord Reminder Bot"
        echo "üì¶ Using image: $IMAGE_NAME"
        
        # Stop existing container
        echo "üõë Stopping existing container..."
        docker-compose down || true
        
        # Pull latest image
        echo "üì• Pulling latest image..."
        docker pull "$IMAGE_NAME"
        
        # Update docker-compose to use new image
        export IMAGE_NAME="$IMAGE_NAME"
        
        # Start new container
        echo "‚ñ∂Ô∏è Starting new container..."
        docker-compose up -d
        
        # Check health
        echo "üîç Checking container health..."
        sleep 10
        
        if docker-compose ps | grep -q "Up"; then
            echo "‚úÖ Deployment successful!"
            docker-compose logs --tail=20 discord-reminder-bot
        else
            echo "‚ùå Deployment failed!"
            docker-compose logs discord-reminder-bot
            exit 1
        fi
        EOF
        
        chmod +x deployment/deploy.sh
    
    - name: Setup SSH and deploy to production server
      if: success()
      run: |
        # This step would typically:
        # 1. Setup SSH keys
        # 2. Copy deployment package to server
        # 3. Execute deployment script on server
        
        echo "üèóÔ∏è Production deployment prepared"
        echo "üìÅ Deployment package created with:"
        echo "  - docker-compose.yml"
        echo "  - env.template" 
        echo "  - deploy.sh script"
        echo "üîó Image: ${{ needs.build-and-push.outputs.image }}"
        
        # For actual deployment, you would uncomment and configure:
        # echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa
        # scp -r deployment/ user@your-server:/opt/discord-bot/
        # ssh user@your-server "cd /opt/discord-bot && ./deploy.sh ${{ needs.build-and-push.outputs.image }}"
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/
        retention-days: 30
    
    - name: Create deployment notification
      run: |
        echo "## üéâ Production Deployment Ready!" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Package created and ready for deployment" >> $GITHUB_STEP_SUMMARY  
        echo "- **Image**: \`${{ needs.build-and-push.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Package**: Available as artifact" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Manual Deployment Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the deployment package artifact" >> $GITHUB_STEP_SUMMARY
        echo "2. Copy to your server: \`scp -r deployment/ user@server:/opt/discord-bot/\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Run: \`cd /opt/discord-bot && ./deploy.sh\`" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Deployment completed successfully!"
        # Add notification to Discord, Slack, etc.
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        # Add failure notification