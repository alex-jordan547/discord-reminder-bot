name: CD - Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch: # Allow manual deployment
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Optimize pip and Docker builds
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONUNBUFFERED: 1

jobs:
  # Pre-deployment validation
  validate-before-deploy:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment != '')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Quick validation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install audioop-lts  # Python 3.13 compatibility
        
        # Quick syntax check
        python -m py_compile bot.py
        python -c "import bot; print('✓ Bot imports successfully')"
        
        echo "✅ Pre-deployment validation passed"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-before-deploy
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment != '')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{date 'YYYY-MM-DD'}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=Discord Reminder Bot
          org.opencontainers.image.description=A Discord bot for managing reminders
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.created={{date 'iso8601'}}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: mode=max
        sbom: true

    - name: Generate SBOM and attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
    
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: \`linux/amd64, linux/arm64\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: Trivy scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Pushed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Alternative deployment using Docker Hub (if preferred)
  build-dockerhub:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: false  # Disabled by default, set to true if you prefer Docker Hub
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/discord-reminder-bot
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 15
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "🔄 Deploying to staging environment"
        echo "Image: ${{ needs.build-and-push.outputs.image }}"
        echo "Digest: ${{ needs.build-and-push.outputs.digest }}"
        echo "This would trigger staging deployment"
        # Add your staging deployment commands here
        
        # Example staging deployment steps:
        # 1. SSH to staging server
        # 2. Pull new image
        # 3. Update docker-compose
        # 4. Restart services
        # 5. Health check

    - name: Staging health check
      run: |
        echo "🔍 Performing staging health check..."
        # Add health check logic here
        echo "✅ Staging deployment verified"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 20
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        # Create a deployment package with docker-compose and configs
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp .env.example deployment/env.template
        
        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        IMAGE_NAME="${1:-${{ needs.build-and-push.outputs.image }}}"
        
        echo "🚀 Starting deployment of Discord Reminder Bot"
        echo "📦 Using image: $IMAGE_NAME"
        echo "🔍 Image digest: ${{ needs.build-and-push.outputs.digest }}"
        
        # Stop existing container
        echo "🛑 Stopping existing container..."
        docker compose down || true
        
        # Pull latest image
        echo "📥 Pulling latest image..."
        docker pull "$IMAGE_NAME"
        
        # Verify image digest
        PULLED_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_NAME" | cut -d'@' -f2)
        EXPECTED_DIGEST="${{ needs.build-and-push.outputs.digest }}"
        
        if [ -n "$EXPECTED_DIGEST" ] && [ "$PULLED_DIGEST" != "$EXPECTED_DIGEST" ]; then
            echo "❌ Image digest mismatch! Expected: $EXPECTED_DIGEST, Got: $PULLED_DIGEST"
            exit 1
        fi
        
        # Update docker-compose to use new image
        export IMAGE_NAME="$IMAGE_NAME"
        
        # Backup current data
        echo "💾 Backing up current data..."
        if [ -f "watched_reminders.json" ]; then
            cp watched_reminders.json "watched_reminders.json.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Start new container
        echo "▶️ Starting new container..."
        docker compose up -d
        
        # Check health
        echo "🔍 Checking container health..."
        sleep 15
        
        # Verify container is running
        if docker compose ps discord-reminder-bot | grep -q "Up"; then
            echo "✅ Container is running"
        else
            echo "❌ Container failed to start!"
            docker compose logs discord-reminder-bot
            exit 1
        fi
        
        # Basic health check
        echo "🏥 Performing health check..."
        for i in {1..5}; do
            if docker compose exec -T discord-reminder-bot python -c "import discord; print('Bot can import discord.py')" 2>/dev/null; then
                echo "✅ Health check passed"
                break
            elif [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                docker compose logs --tail=50 discord-reminder-bot
                exit 1
            else
                echo "⏳ Health check attempt $i failed, retrying..."
                sleep 10
            fi
        done
        
        echo "🎉 Deployment successful!"
        echo "📋 Container status:"
        docker compose ps
        echo ""
        echo "📜 Recent logs:"
        docker compose logs --tail=20 discord-reminder-bot
        EOF
        
        chmod +x deployment/deploy.sh
        
        # Create rollback script
        cat > deployment/rollback.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🔄 Rolling back Discord Reminder Bot"
        
        # Stop current container
        docker compose down
        
        # Restore data backup if available
        LATEST_BACKUP=$(ls -t watched_reminders.json.backup.* 2>/dev/null | head -n1 || echo "")
        if [ -n "$LATEST_BACKUP" ]; then
            echo "💾 Restoring data from $LATEST_BACKUP"
            cp "$LATEST_BACKUP" watched_reminders.json
        fi
        
        echo "⚠️ Please manually specify the previous image version and restart"
        echo "Example: docker compose up -d"
        EOF
        
        chmod +x deployment/rollback.sh

    - name: Setup SSH and deploy to production server
      if: success()
      run: |
        # This step would typically:
        # 1. Setup SSH keys
        # 2. Copy deployment package to server
        # 3. Execute deployment script on server
        
        echo "🏗️ Production deployment prepared"
        echo "📁 Deployment package created with:"
        echo "  - docker-compose.yml"
        echo "  - env.template" 
        echo "  - deploy.sh script"
        echo "  - rollback.sh script"
        echo "🔗 Image: ${{ needs.build-and-push.outputs.image }}"
        echo "🔍 Digest: ${{ needs.build-and-push.outputs.digest }}"
        
        # For actual deployment, you would uncomment and configure:
        # echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa
        # ssh-keyscan -H your-server.com >> ~/.ssh/known_hosts
        # scp -r deployment/ user@your-server:/opt/discord-bot/
        # ssh user@your-server "cd /opt/discord-bot && ./deploy.sh ${{ needs.build-and-push.outputs.image }}"
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ github.sha }}
        path: deployment/
        retention-days: 90

    - name: Create deployment notification
      run: |
        echo "## 🎉 Production Deployment Ready!" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Package created and ready for deployment" >> $GITHUB_STEP_SUMMARY  
        echo "- **Image**: \`${{ needs.build-and-push.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ needs.build-and-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: \`${{ needs.build-and-push.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Package**: Available as artifact (90 days retention)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Manual Deployment Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the deployment package artifact" >> $GITHUB_STEP_SUMMARY
        echo "2. Copy to your server: \`scp -r deployment/ user@server:/opt/discord-bot/\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Run: \`cd /opt/discord-bot && ./deploy.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "4. If needed, rollback: \`./rollback.sh\`" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-push, deploy-production]
    if: always() && needs.build-and-push.result == 'success'
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🚀 Image: ${{ needs.build-and-push.outputs.image }}"
        echo "🔍 Digest: ${{ needs.build-and-push.outputs.digest }}"
        # Add notification to Discord webhook, Slack, etc.
        # Example Discord webhook:
        # curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"content": "🚀 Discord Reminder Bot deployed successfully!\n**Image**: `${{ needs.build-and-push.outputs.image }}`\n**Commit**: `${{ github.sha }}`"}'

    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "🔍 Check the deploy-production job for details"
        # Add failure notification
        # Example Discord webhook:
        # curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"content": "❌ Discord Reminder Bot deployment failed!\n**Commit**: `${{ github.sha }}`\n**Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'

    - name: Create final summary
      if: always()
      run: |
        echo "## 📊 Final Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
