name: Discord Reminder Bot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  quality-gate:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Run linting
      run: |
        npm run lint
        npm run lint:strict
    
    - name: Run type checking
      run: |
        npm run type-check
        npm run type-check:strict
    
    - name: Run tests
      run: |
        npm run test:coverage
        npm run test:integration
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate
        cd client && npm audit --audit-level moderate
        cd ../server && npm audit --audit-level moderate
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: 'javascript'

  # Build and Push Docker Images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan]
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Infrastructure Tests
  infrastructure-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: discord_bot_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Create test environment
      run: |
        cp .env.docker .env.test
        sed -i 's/postgres_password/test_password/g' .env.test
        sed -i 's/localhost/127.0.0.1/g' .env.test
    
    - name: Run infrastructure tests
      env:
        DATABASE_TYPE: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: discord_bot_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        npm run test:infrastructure
        npx playwright test tests/infrastructure/

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-tests]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-discord-bot.yourcompany.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      env:
        DEPLOYMENT_ENV: staging
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY: ${{ env.REGISTRY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        HEALTH_CHECK_TIMEOUT: 180
      run: |
        chmod +x scripts/deploy-staging.sh
        ./scripts/deploy-staging.sh deploy
    
    - name: Run staging health checks
      run: |
        ./scripts/deploy-staging.sh health-check
    
    - name: Run staging integration tests
      run: |
        echo "Running staging integration tests..."
        ./scripts/deploy-staging.sh status
        echo "Staging integration tests completed!"

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://discord-bot.yourcompany.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set deployment environment variables
      run: |
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "REGISTRY=${{ env.REGISTRY }}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
    
    - name: Run production deployment
      env:
        DEPLOYMENT_ENV: production
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY: ${{ env.REGISTRY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        HEALTH_CHECK_TIMEOUT: 300
        ROLLBACK_ENABLED: true
      run: |
        chmod +x scripts/deploy-production.sh
        ./scripts/deploy-production.sh deploy
    
    - name: Verify deployment status
      run: |
        ./scripts/deploy-production.sh status
        echo "Production deployment verification completed!"

  # Post-Deployment Monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Setup enhanced monitoring
      run: |
        echo "Enabling enhanced monitoring for 24 hours..."
    
    - name: Run synthetic tests
      run: |
        echo "Running synthetic tests..."
        for i in {1..10}; do
          echo "Test $i of 10"
          sleep 30
        done
    
    - name: Create deployment record
      run: |
        echo "Recording successful deployment..."

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    
    steps:
    - name: Notify on completion
      run: |
        echo "Notifying teams of deployment status: ${{ job.status }}"
