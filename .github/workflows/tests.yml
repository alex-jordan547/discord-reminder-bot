name: Tests et Validation

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-cov pytest-asyncio

    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DISCORD_TOKEN=test_token_for_ci" >> .env
        echo "TEST_MODE=true" >> .env
        echo "SQLITE_STORAGE=true" >> .env
        echo "LOG_LEVEL=ERROR" >> .env

    - name: Run linting
      run: |
        make format-check
        make lint || true  # Ne pas Ã©chouer sur les warnings de lint

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run integration tests
      run: |
        make test-integration

    - name: Run comprehensive tests
      run: |
        make test-comprehensive

    - name: Generate coverage report
      run: |
        make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DISCORD_TOKEN=test_token_for_ci" >> .env
        echo "TEST_MODE=true" >> .env

    - name: Run final validation
      run: |
        python validate_final.py

    - name: Test bot startup (dry run)
      run: |
        timeout 10s python bot.py || true

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json