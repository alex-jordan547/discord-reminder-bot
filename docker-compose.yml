# Removed obsolete version attribute

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: discord-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-discord_bot}
      POSTGRES_USER: ${POSTGRES_USER:-bot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - bot-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-bot_user} -d ${POSTGRES_DB:-discord_bot}']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: discord-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - bot-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      retries: 3

  # Discord Bot Application
  discord-reminder-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: discord-reminder-bot
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.docker
    ports:
      - '${PORT:-3000}:3000'
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    # Healthcheck temporarily disabled to avoid restarts during Discord session limit
    # healthcheck:
    #   test: ['CMD', 'curl', '-f', 'http://localhost:3000/health', '||', 'exit', '1']
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    networks:
      - bot-network
    user: '1001:1001'

  # Database Migration
  db-migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: discord-bot-migration
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_TYPE=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-discord_bot}
      - POSTGRES_USER=${POSTGRES_USER:-bot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - MIGRATION_MODE=true
      - NODE_ENV=production
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    networks:
      - bot-network
    profiles:
      - migration
    restart: 'no'
    command: ['node', 'server/dist/scripts/migrate-database.js']

# Data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network
networks:
  bot-network:
    driver: bridge
