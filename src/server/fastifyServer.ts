/**
 * Discord Reminder Bot - Fastify Server Integration
 * 
 * Optional Fastify server for:
 * - Health check endpoints
 * - Bot status monitoring
 * - Admin API endpoints
 * - Webhook handlers (future)
 */

import Fastify, { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\nimport { Settings } from '@/config/settings';\nimport { createLogger } from '@/utils/loggingConfig';\n\nconst logger = createLogger('server');\n\n/**\n * Health check response interface\n */\ninterface HealthResponse {\n  status: string;\n  timestamp: string;\n  uptime: number;\n  memory: NodeJS.MemoryUsage;\n  version: string;\n  nodeVersion: string;\n}\n\n/**\n * Bot status response interface\n */\ninterface BotStatusResponse {\n  status: string;\n  connected: boolean;\n  guilds: number;\n  events: number;\n  uptime: number;\n  memory: NodeJS.MemoryUsage;\n  scheduler: {\n    status: string;\n    nextCheck: string | null;\n  };\n}\n\n/**\n * Create and configure Fastify server instance\n */\nexport async function createServer(): Promise<FastifyInstance> {\n  const fastify = Fastify({\n    logger: {\n      level: Settings.LOG_LEVEL.toLowerCase(),\n      transport: {\n        target: 'pino-pretty',\n        options: {\n          colorize: Settings.LOG_COLORS,\n          translateTime: 'HH:MM:ss Z',\n          ignore: 'pid,hostname',\n        },\n      },\n    },\n  });\n\n  // Register CORS for API access\n  await fastify.register(require('@fastify/cors'), {\n    origin: Settings.NODE_ENV === 'development' ? true : false,\n  });\n\n  // Register rate limiting\n  await fastify.register(require('@fastify/rate-limit'), {\n    max: 100,\n    timeWindow: '1 minute',\n  });\n\n  /**\n   * Basic health check endpoint\n   */\n  fastify.get('/health', async (request: FastifyRequest, reply: FastifyReply): Promise<HealthResponse> => {\n    return {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      version: '2.0.0',\n      nodeVersion: process.version,\n    };\n  });\n\n  /**\n   * Detailed bot status endpoint\n   */\n  fastify.get('/health/bot', async (request: FastifyRequest, reply: FastifyReply): Promise<BotStatusResponse> => {\n    try {\n      // Access bot client from global context (set by main application)\n      const client = (global as any).discordClient;\n      \n      if (!client) {\n        reply.code(503);\n        return {\n          status: 'error',\n          connected: false,\n          guilds: 0,\n          events: 0,\n          uptime: process.uptime(),\n          memory: process.memoryUsage(),\n          scheduler: {\n            status: 'disconnected',\n            nextCheck: null,\n          },\n        };\n      }\n\n      // Get event manager and scheduler status\n      const eventManager = (client as any).eventManager;\n      const reminderScheduler = (client as any).reminderScheduler;\n      \n      const totalEvents = eventManager ? await eventManager.getTotalEventCount() : 0;\n      const schedulerStatus = reminderScheduler ? reminderScheduler.getStatus() : { status: 'unknown', nextCheck: null };\n\n      return {\n        status: 'ok',\n        connected: client.isReady(),\n        guilds: client.guilds.cache.size,\n        events: totalEvents,\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n        scheduler: {\n          status: schedulerStatus.status,\n          nextCheck: schedulerStatus.nextCheck ? schedulerStatus.nextCheck.toISOString() : null,\n        },\n      };\n    } catch (error) {\n      logger.error(`Error in bot health check: ${error}`);\n      reply.code(500);\n      return {\n        status: 'error',\n        connected: false,\n        guilds: 0,\n        events: 0,\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n        scheduler: {\n          status: 'error',\n          nextCheck: null,\n        },\n      };\n    }\n  });\n\n  /**\n   * Bot statistics endpoint (requires auth in production)\n   */\n  fastify.get('/api/stats', async (request: FastifyRequest, reply: FastifyReply) => {\n    try {\n      // Simple auth check for production\n      if (Settings.NODE_ENV === 'production') {\n        const authHeader = request.headers.authorization;\n        const expectedToken = Settings.API_TOKEN;\n        \n        if (!authHeader || !expectedToken || authHeader !== `Bearer ${expectedToken}`) {\n          reply.code(401);\n          return { error: 'Unauthorized' };\n        }\n      }\n\n      const client = (global as any).discordClient;\n      if (!client) {\n        reply.code(503);\n        return { error: 'Bot not connected' };\n      }\n\n      const eventManager = (client as any).eventManager;\n      const totalEvents = eventManager ? await eventManager.getTotalEventCount() : 0;\n      \n      // Gather guild statistics\n      const guilds = Array.from(client.guilds.cache.values()).map(guild => ({\n        id: guild.id,\n        name: guild.name,\n        memberCount: guild.memberCount,\n      }));\n\n      return {\n        bot: {\n          username: client.user.username,\n          id: client.user.id,\n          guilds: client.guilds.cache.size,\n          uptime: process.uptime(),\n        },\n        events: {\n          total: totalEvents,\n        },\n        guilds,\n        system: {\n          memory: process.memoryUsage(),\n          nodeVersion: process.version,\n          platform: process.platform,\n        },\n      };\n    } catch (error) {\n      logger.error(`Error in stats endpoint: ${error}`);\n      reply.code(500);\n      return { error: 'Internal server error' };\n    }\n  });\n\n  /**\n   * Simple API info endpoint\n   */\n  fastify.get('/api', async (request: FastifyRequest, reply: FastifyReply) => {\n    return {\n      name: 'Discord Reminder Bot API',\n      version: '2.0.0',\n      description: 'TypeScript Discord bot for event reminders',\n      endpoints: {\n        health: '/health',\n        botHealth: '/health/bot',\n        stats: '/api/stats',\n      },\n      documentation: 'https://github.com/alex-jordan547/discord-reminder-bot',\n    };\n  });\n\n  /**\n   * Catch-all 404 handler\n   */\n  fastify.setNotFoundHandler(async (request: FastifyRequest, reply: FastifyReply) => {\n    reply.code(404);\n    return {\n      error: 'Not Found',\n      message: 'The requested endpoint does not exist',\n      availableEndpoints: ['/health', '/health/bot', '/api', '/api/stats'],\n    };\n  });\n\n  /**\n   * Global error handler\n   */\n  fastify.setErrorHandler(async (error, request, reply) => {\n    logger.error(`Server error on ${request.method} ${request.url}: ${error.message}`);\n    \n    reply.code(error.statusCode || 500);\n    return {\n      error: error.name || 'Internal Server Error',\n      message: Settings.NODE_ENV === 'development' ? error.message : 'Something went wrong',\n    };\n  });\n\n  logger.info('Fastify server configured successfully');\n  return fastify;\n}\n\n/**\n * Helper function to set the Discord client reference for health checks\n */\nexport function setDiscordClientReference(client: any): void {\n  (global as any).discordClient = client;\n  logger.info('Discord client reference set for server health checks');\n}