/**\n * Discord Reminder Bot - Permission Utilities\n * \n * Utilities for checking Discord permissions:\n * - Admin role validation\n * - Channel permission checking\n * - User permission validation\n * - Bot permission verification\n */\n\nimport { GuildMember, GuildChannel, User, PermissionFlagsBits, TextChannel } from 'discord.js';\nimport { Settings } from '@/config/settings';\nimport { createLogger } from '@/utils/loggingConfig';\n\nconst logger = createLogger('permissions');\n\n/**\n * Check if a guild member has admin role based on configured admin roles\n */\nexport function hasAdminRole(member: GuildMember): boolean {\n  try {\n    const adminRoles = Settings.ADMIN_ROLES;\n    \n    if (!adminRoles || adminRoles.length === 0) {\n      // If no admin roles configured, check for Administrator permission\n      return member.permissions.has(PermissionFlagsBits.Administrator);\n    }\n\n    // Check if user has any of the configured admin roles\n    const hasRole = member.roles.cache.some(role => \n      adminRoles.includes(role.name)\n    );\n\n    if (hasRole) {\n      return true;\n    }\n\n    // Fallback to checking Administrator permission\n    return member.permissions.has(PermissionFlagsBits.Administrator);\n  } catch (error) {\n    logger.error(`Error checking admin role for ${member.user.tag}: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Check if a user has permission to use a specific command\n */\nexport function canUseCommand(member: GuildMember, command: string): boolean {\n  try {\n    // For now, all commands require admin role\n    // This could be expanded to have different permission levels per command\n    return hasAdminRole(member);\n  } catch (error) {\n    logger.error(`Error checking command permission for ${member.user.tag}: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Validate if a user (bot) has necessary permissions in a channel\n */\nexport function validatePermissions(channel: GuildChannel, user: User): boolean {\n  try {\n    if (!channel.guild) {\n      return false;\n    }\n\n    const member = channel.guild.members.cache.get(user.id);\n    if (!member) {\n      logger.warn(`Member not found in guild for user ${user.tag}`);\n      return false;\n    }\n\n    const permissions = channel.permissionsFor(member);\n    if (!permissions) {\n      logger.warn(`Could not determine permissions for ${user.tag} in ${channel.name}`);\n      return false;\n    }\n\n    // Check required permissions for the bot\n    const requiredPermissions = [\n      PermissionFlagsBits.ViewChannel,\n      PermissionFlagsBits.SendMessages,\n      PermissionFlagsBits.EmbedLinks,\n      PermissionFlagsBits.ReadMessageHistory,\n    ];\n\n    const hasAllPermissions = requiredPermissions.every(perm => \n      permissions.has(perm)\n    );\n\n    if (!hasAllPermissions) {\n      const missingPerms = requiredPermissions.filter(perm => \n        !permissions.has(perm)\n      );\n      logger.warn(`Missing permissions in ${channel.name}: ${missingPerms.join(', ')}`);\n    }\n\n    return hasAllPermissions;\n  } catch (error) {\n    logger.error(`Error validating permissions: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Check if bot can access and send messages to a channel\n */\nexport function canAccessChannel(channel: TextChannel, botUser: User): boolean {\n  return validatePermissions(channel, botUser);\n}\n\n/**\n * Check if a member can manage events (create/delete watches)\n */\nexport function canManageEvents(member: GuildMember): boolean {\n  return hasAdminRole(member);\n}\n\n/**\n * Check if a member can view event lists\n */\nexport function canViewEvents(member: GuildMember): boolean {\n  // For now, anyone can view events in their server\n  // This could be restricted to admin roles if needed\n  return true;\n}\n\n/**\n * Get permission info for a member in a specific channel\n */\nexport function getPermissionInfo(member: GuildMember, channel?: GuildChannel): {\n  isAdmin: boolean;\n  canManageEvents: boolean;\n  canViewEvents: boolean;\n  channelPermissions?: {\n    canView: boolean;\n    canSend: boolean;\n    canEmbed: boolean;\n    canReadHistory: boolean;\n  };\n} {\n  const info = {\n    isAdmin: hasAdminRole(member),\n    canManageEvents: canManageEvents(member),\n    canViewEvents: canViewEvents(member),\n  };\n\n  if (channel) {\n    const permissions = channel.permissionsFor(member);\n    (info as any).channelPermissions = {\n      canView: permissions?.has(PermissionFlagsBits.ViewChannel) ?? false,\n      canSend: permissions?.has(PermissionFlagsBits.SendMessages) ?? false,\n      canEmbed: permissions?.has(PermissionFlagsBits.EmbedLinks) ?? false,\n      canReadHistory: permissions?.has(PermissionFlagsBits.ReadMessageHistory) ?? false,\n    };\n  }\n\n  return info;\n}\n\n/**\n * Check if bot has all required permissions in a guild\n */\nexport function validateBotGuildPermissions(member: GuildMember): {\n  valid: boolean;\n  missing: string[];\n} {\n  const requiredPermissions = [\n    PermissionFlagsBits.ViewChannel,\n    PermissionFlagsBits.SendMessages,\n    PermissionFlagsBits.EmbedLinks,\n    PermissionFlagsBits.ReadMessageHistory,\n    PermissionFlagsBits.AddReactions,\n    PermissionFlagsBits.UseExternalEmojis,\n  ];\n\n  const missingPermissions: string[] = [];\n  \n  for (const permission of requiredPermissions) {\n    if (!member.permissions.has(permission)) {\n      missingPermissions.push(permission.toString());\n    }\n  }\n\n  return {\n    valid: missingPermissions.length === 0,\n    missing: missingPermissions,\n  };\n}\n\n/**\n * Format permission names for user-friendly display\n */\nexport function formatPermissionName(permission: bigint): string {\n  const permissionNames: { [key: string]: string } = {\n    [PermissionFlagsBits.ViewChannel.toString()]: 'View Channel',\n    [PermissionFlagsBits.SendMessages.toString()]: 'Send Messages',\n    [PermissionFlagsBits.EmbedLinks.toString()]: 'Embed Links',\n    [PermissionFlagsBits.ReadMessageHistory.toString()]: 'Read Message History',\n    [PermissionFlagsBits.AddReactions.toString()]: 'Add Reactions',\n    [PermissionFlagsBits.UseExternalEmojis.toString()]: 'Use External Emojis',\n    [PermissionFlagsBits.Administrator.toString()]: 'Administrator',\n    [PermissionFlagsBits.ManageGuild.toString()]: 'Manage Server',\n    [PermissionFlagsBits.ManageChannels.toString()]: 'Manage Channels',\n    [PermissionFlagsBits.ManageRoles.toString()]: 'Manage Roles',\n  };\n\n  return permissionNames[permission.toString()] || `Unknown Permission (${permission})`;\n}\n\n/**\n * Generate a permission report for debugging\n */\nexport function generatePermissionReport(member: GuildMember, channel?: GuildChannel): string {\n  const report = [];\n  \n  report.push(`Permission Report for ${member.user.tag}:`);\n  report.push(`- Is Admin: ${hasAdminRole(member)}`);\n  report.push(`- Can Manage Events: ${canManageEvents(member)}`);\n  report.push(`- Can View Events: ${canViewEvents(member)}`);\n  \n  if (channel) {\n    report.push(`\\nChannel Permissions (${channel.name}):`);\n    const permissions = getPermissionInfo(member, channel).channelPermissions;\n    if (permissions) {\n      report.push(`- Can View: ${permissions.canView}`);\n      report.push(`- Can Send: ${permissions.canSend}`);\n      report.push(`- Can Embed: ${permissions.canEmbed}`);\n      report.push(`- Can Read History: ${permissions.canReadHistory}`);\n    }\n  }\n  \n  report.push(`\\nAdmin Roles Configured: ${Settings.ADMIN_ROLES.join(', ')}`);\n  report.push(`User Roles: ${member.roles.cache.map(r => r.name).join(', ')}`);\n  \n  return report.join('\\n');\n}\n\n/**\n * Check if the bot setup is valid for a guild\n */\nexport async function validateBotSetup(member: GuildMember): Promise<{\n  valid: boolean;\n  issues: string[];\n  warnings: string[];\n}> {\n  const issues: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    // Check basic guild permissions\n    const guildPerms = validateBotGuildPermissions(member);\n    if (!guildPerms.valid) {\n      issues.push(`Missing guild permissions: ${guildPerms.missing.map(formatPermissionName).join(', ')}`);\n    }\n\n    // Check admin role configuration\n    if (!Settings.ADMIN_ROLES || Settings.ADMIN_ROLES.length === 0) {\n      warnings.push('No admin roles configured - using Administrator permission as fallback');\n    } else {\n      const guild = member.guild;\n      const configuredRoles = Settings.ADMIN_ROLES;\n      const existingRoles = guild.roles.cache.map(r => r.name);\n      const missingRoles = configuredRoles.filter(role => !existingRoles.includes(role));\n      \n      if (missingRoles.length > 0) {\n        warnings.push(`Configured admin roles not found in server: ${missingRoles.join(', ')}`);\n      }\n    }\n\n    // Check if bot can create embeds\n    if (!member.permissions.has(PermissionFlagsBits.EmbedLinks)) {\n      issues.push('Bot cannot create embeds (required for reminders)');\n    }\n\n    return {\n      valid: issues.length === 0,\n      issues,\n      warnings,\n    };\n  } catch (error) {\n    logger.error(`Error validating bot setup: ${error}`);\n    return {\n      valid: false,\n      issues: ['Error occurred during validation'],\n      warnings: [],\n    };\n  }\n}