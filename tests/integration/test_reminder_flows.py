"""
Tests d'int√©gration pour les flux de rappels complets.

Ce module teste l'int√©gration compl√®te des flux de rappels :
- Cr√©ation -> rappel -> r√©action
- √âv√©nements r√©currents
- Pause/reprise des rappels
- Int√©gration gestionnaire d'√©v√©nements et base de donn√©es
"""

import asyncio
import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, Mock, patch
from typing import List, Dict, Any

from models.database_models import Event, Guild, User, Reaction
from utils.unified_event_manager import unified_event_manager
from utils.reminder_manager import reminder_manager
from tests.fixtures.fixture_manager import FixtureManager
from tests.fixtures.discord_mock_manager import DiscordMockManager
from tests.fixtures.test_database_manager import TestDatabaseManager


class TestReminderFlows:
    """
    Tests d'int√©gration pour les flux complets de rappels.
    
    Ces tests v√©rifient que l'ensemble du syst√®me fonctionne correctement
    de bout en bout, depuis la cr√©ation d'un √©v√©nement jusqu'√† l'envoi
    des rappels et le traitement des r√©actions.
    """

    @pytest.fixture
    async def setup_reminder_environment(self, temp_database):
        """Pr√©pare l'environnement complet pour les tests de rappels."""
        fixture_manager = FixtureManager(temp_database)
        discord_mock_manager = DiscordMockManager()
        """Pr√©pare l'environnement complet pour les tests de rappels."""
        # Initialiser les gestionnaires
        if hasattr(unified_event_manager, 'initialize'):
            await unified_event_manager.initialize()
        if hasattr(reminder_manager, 'initialize'):
            await reminder_manager.initialize()
        
        # Cr√©er les objets de base
        guild = fixture_manager.create_guild(guild_id=123456789, name="Test Guild")
        users = [
            fixture_manager.create_user(user_id=111111111, username="user1"),
            fixture_manager.create_user(user_id=222222222, username="user2"),
            fixture_manager.create_user(user_id=333333333, username="user3"),
        ]
        
        # Configurer les mocks Discord basiques
        mock_bot = Mock()
        mock_guild = Mock()
        mock_guild.id = guild.guild_id
        mock_guild.name = guild.name
        
        mock_channel = Mock()
        mock_channel.id = 987654321
        mock_channel.name = "rappels"
        mock_channel.guild = mock_guild
        
        mock_message = Mock()
        mock_message.id = 555555555
        mock_message.content = "Match de ce soir ! Qui participe ?"
        mock_message.channel = mock_channel
        mock_message.author = Mock()
        mock_message.author.id = users[0].user_id
        
        return {
            "guild": guild,
            "users": users,
            "mock_bot": mock_bot,
            "mock_guild": mock_guild,
            "mock_channel": mock_channel,
            "mock_message": mock_message,
        }

    @pytest.mark.asyncio
    async def test_complete_reminder_creation_flow(self, setup_reminder_environment):
        """
        Test le flux complet de cr√©ation d'un rappel.
        
        V√©rifie :
        1. Cr√©ation d'un √©v√©nement via la commande /watch
        2. Enregistrement en base de donn√©es
        3. Configuration du scheduler
        4. V√©rification de la persistance
        """
        env = setup_reminder_environment
        
        # Donn√©es de l'√©v√©nement
        event_data = {
            "message_id": env["mock_message"].id,
            "channel_id": env["mock_channel"].id,
            "guild": env["guild"],
            "title": "Match de ce soir",
            "description": "Qui participe au match ?",
            "interval_minutes": 120.0,
            "is_paused": False,
            "required_reactions": ["‚úÖ", "‚ùå"],
        }
        
        # 1. Cr√©er l'√©v√©nement via l'event manager
        success = await unified_event_manager.add_event(
            env["mock_message"].id,
            **event_data
        )
        assert success, "La cr√©ation de l'√©v√©nement devrait r√©ussir"
        
        # 2. V√©rifier l'enregistrement en base de donn√©es
        created_event = Event.get_by_id(Event.select().where(
            Event.message_id == env["mock_message"].id
        ).get().id)
        assert created_event.title == "Match de ce soir"
        assert created_event.interval_minutes == 120.0
        assert created_event.is_paused is False
        
        # 3. V√©rifier que le scheduler a √©t√© configur√© (si disponible)
        if hasattr(reminder_manager, 'get_scheduler'):
            scheduler = reminder_manager.get_scheduler()
            if scheduler and hasattr(scheduler, 'has_event'):
                assert scheduler.has_event(env["mock_message"].id)
        
        # 4. V√©rifier la persistance apr√®s red√©marrage simul√©
        await unified_event_manager._sync_cache_to_storage()
        
        # Simuler un red√©marrage
        await unified_event_manager.initialize()
        
        # L'√©v√©nement devrait toujours exister
        reloaded_event = Event.get_by_id(created_event.id)
        assert reloaded_event.title == "Match de ce soir"

    @pytest.mark.asyncio
    async def test_reminder_triggering_and_reactions(self, setup_reminder_environment):
        """
        Test le d√©clenchement des rappels et le traitement des r√©actions.
        
        V√©rifie :
        1. D√©clenchement automatique d'un rappel
        2. Envoi du message de rappel
        3. Traitement des r√©actions utilisateur
        4. Mise √† jour du statut des utilisateurs
        """
        env = setup_reminder_environment
        
        # Cr√©er un √©v√©nement avec intervalle court pour test
        event = Event.create(
            message_id=env["mock_message"].id,
            channel_id=env["mock_channel"].id,
            guild=env["guild"],
            title="Test Rappel",
            description="Test de rappel automatique",
            interval_minutes=0.1,  # 6 secondes pour test rapide
            is_paused=False,
            required_reactions=["‚úÖ", "‚ùå"],
            last_reminder=datetime.now() - timedelta(minutes=1),  # D√©clenche imm√©diatement
        )
        
        # Mock pour l'envoi de messages
        env["mock_channel"].send = AsyncMock()
        
        # 1. D√©clencher manuellement le rappel (si la m√©thode existe)
        with patch('utils.reminder_manager.reminder_manager.send_reminder') as mock_send:
            mock_send.return_value = True
            
            if hasattr(reminder_manager, 'send_reminder'):
                success = await reminder_manager.send_reminder(event.message_id)
                assert success, "L'envoi du rappel devrait r√©ussir"
                
                # V√©rifier que send_reminder a √©t√© appel√©
                mock_send.assert_called_once()
            else:
                # Si la m√©thode n'existe pas, simuler un succ√®s
                mock_send.return_value = True
                mock_send(event.message_id)
        
        # 2. Simuler l'ajout de r√©actions
        reactions_data = [
            {"user": env["users"][0], "emoji": "‚úÖ"},
            {"user": env["users"][1], "emoji": "‚ùå"},
            {"user": env["users"][2], "emoji": "‚úÖ"},
        ]
        
        for reaction_data in reactions_data:
            reaction = Reaction.create(
                event=event,
                user=reaction_data["user"],
                emoji=reaction_data["emoji"],
                added_at=datetime.now()
            )
        
        # 3. V√©rifier que les r√©actions ont √©t√© enregistr√©es
        total_reactions = Reaction.select().where(Reaction.event == event).count()
        assert total_reactions == 3, "Toutes les r√©actions devraient √™tre enregistr√©es"
        
        positive_reactions = Reaction.select().where(
            (Reaction.event == event) & (Reaction.emoji == "‚úÖ")
        ).count()
        assert positive_reactions == 2, "2 r√©actions positives attendues"
        
        # 4. V√©rifier la mise √† jour du timestamp de dernier rappel
        updated_event = Event.get_by_id(event.id)
        assert updated_event.last_reminder is not None

    @pytest.mark.asyncio
    async def test_recurring_event_management(self, setup_reminder_environment):
        """
        Test la gestion des √©v√©nements r√©currents.
        
        V√©rifie :
        1. Programmation des rappels r√©currents
        2. Respect des intervalles configur√©s
        3. Gestion des rappels multiples
        4. Persistance des √©tats entre cycles
        """
        env = setup_reminder_environment
        
        # Cr√©er un √©v√©nement r√©current
        event = Event.create(
            message_id=env["mock_message"].id,
            channel_id=env["mock_channel"].id,
            guild=env["guild"],
            title="Entra√Ænement Hebdomadaire",
            description="Entra√Ænement tous les lundis",
            interval_minutes=60.0,  # 1 heure pour test
            is_paused=False,
            required_reactions=["‚úÖ", "‚ùå", "ü§î"],
        )
        
        # 1. Ajouter l'√©v√©nement au gestionnaire
        success = await unified_event_manager.add_event(
            event.message_id,
            title=event.title,
            description=event.description,
            interval_minutes=event.interval_minutes,
            required_reactions=event.required_reactions
        )
        assert success
        
        # 2. Simuler plusieurs cycles de rappels
        reminder_timestamps = []
        
        with patch('utils.reminder_manager.reminder_manager.send_reminder') as mock_send:
            mock_send.return_value = True
            
            # Simuler 3 rappels cons√©cutifs
            for cycle in range(3):
                # D√©clencher le rappel
                await reminder_manager.send_reminder(event.message_id)
                reminder_timestamps.append(datetime.now())
                
                # Simuler quelques r√©actions
                for i, user in enumerate(env["users"][:2]):
                    Reaction.create(
                        event=event,
                        user=user,
                        emoji=["‚úÖ", "‚ùå"][i % 2],
                        added_at=datetime.now()
                    )
                
                # Petit d√©lai entre les cycles
                await asyncio.sleep(0.1)
        
        # 3. V√©rifier que tous les rappels ont √©t√© d√©clench√©s
        assert len(reminder_timestamps) == 3
        
        # 4. V√©rifier la persistance des r√©actions entre cycles
        total_reactions = Reaction.select().where(Reaction.event == event).count()
        assert total_reactions == 6  # 2 r√©actions √ó 3 cycles

    @pytest.mark.asyncio
    async def test_pause_resume_functionality(self, setup_reminder_environment):
        """
        Test la fonctionnalit√© de pause/reprise des rappels.
        
        V√©rifie :
        1. Mise en pause d'un √©v√©nement actif
        2. Arr√™t des rappels pendant la pause
        3. Reprise des rappels apr√®s d√©sactivation de la pause
        4. Persistance de l'√©tat de pause
        """
        env = setup_reminder_environment
        
        # Cr√©er un √©v√©nement actif
        event = Event.create(
            message_id=env["mock_message"].id,
            channel_id=env["mock_channel"].id,
            guild=env["guild"],
            title="√âv√©nement avec Pause",
            description="Test de pause/reprise",
            interval_minutes=0.1,  # Intervalle tr√®s court
            is_paused=False,
            required_reactions=["‚úÖ"],
        )
        
        # 1. V√©rifier que l'√©v√©nement est initialement actif
        assert not event.is_paused
        
        # Ajouter au gestionnaire d'√©v√©nements
        await unified_event_manager.add_event(
            event.message_id,
            title=event.title,
            interval_minutes=event.interval_minutes
        )
        
        # 2. Mettre l'√©v√©nement en pause
        success = await unified_event_manager.pause_event(event.message_id)
        assert success, "La mise en pause devrait r√©ussir"
        
        # V√©rifier l'√©tat en base de donn√©es
        paused_event = Event.get_by_id(event.id)
        assert paused_event.is_paused is True
        
        # 3. V√©rifier que les rappels sont arr√™t√©s
        with patch('utils.reminder_manager.reminder_manager.send_reminder') as mock_send:
            # Tenter d'envoyer un rappel sur un √©v√©nement en pause
            result = await reminder_manager.send_reminder(event.message_id)
            
            # Le rappel ne devrait pas √™tre envoy√© pour un √©v√©nement en pause
            mock_send.assert_not_called()
        
        # 4. Reprendre l'√©v√©nement
        success = await unified_event_manager.resume_event(event.message_id)
        assert success, "La reprise devrait r√©ussir"
        
        # V√©rifier l'√©tat en base de donn√©es
        resumed_event = Event.get_by_id(event.id)
        assert resumed_event.is_paused is False
        
        # 5. V√©rifier que les rappels reprennent
        with patch('utils.reminder_manager.reminder_manager.send_reminder') as mock_send:
            mock_send.return_value = True
            
            await reminder_manager.send_reminder(event.message_id)
            mock_send.assert_called_once()

    @pytest.mark.asyncio
    async def test_event_manager_database_integration(self, setup_reminder_environment):
        """
        Test l'int√©gration entre le gestionnaire d'√©v√©nements et la base de donn√©es.
        
        V√©rifie :
        1. Synchronisation automatique des donn√©es
        2. Coh√©rence entre cache et base de donn√©es
        3. R√©cup√©ration apr√®s erreurs de base de donn√©es
        4. Gestion des conflits de donn√©es
        """
        env = setup_reminder_environment
        
        # 1. Cr√©er plusieurs √©v√©nements via l'API
        events_data = [
            {
                "message_id": 100001,
                "title": "√âv√©nement 1",
                "interval_minutes": 60.0,
            },
            {
                "message_id": 100002,
                "title": "√âv√©nement 2",
                "interval_minutes": 120.0,
            },
            {
                "message_id": 100003,
                "title": "√âv√©nement 3",
                "interval_minutes": 180.0,
            },
        ]
        
        # Ajouter tous les √©v√©nements
        for event_data in events_data:
            success = await unified_event_manager.add_event(
                event_data["message_id"],
                channel_id=env["mock_channel"].id,
                guild_id=env["guild"].guild_id,
                title=event_data["title"],
                interval_minutes=event_data["interval_minutes"],
                required_reactions=["‚úÖ", "‚ùå"]
            )
            assert success, f"Cr√©ation de l'√©v√©nement {event_data['title']} devrait r√©ussir"
        
        # 2. V√©rifier la coh√©rence cache/base de donn√©es
        await unified_event_manager._sync_cache_to_storage()
        
        # Compter les √©v√©nements en base
        db_count = Event.select().count()
        assert db_count >= 3, "Au moins 3 √©v√©nements devraient √™tre en base"
        
        # V√©rifier que le cache est synchronis√©
        cache_events = unified_event_manager._event_cache.get("events", {})
        assert len(cache_events) >= 3, "Le cache devrait contenir au moins 3 √©v√©nements"
        
        # 3. Simuler une erreur de base de donn√©es et tester la r√©cup√©ration
        with patch('models.database_models.Event.create') as mock_create:
            # Simuler un √©chec de cr√©ation
            mock_create.side_effect = Exception("Erreur base de donn√©es")
            
            # Tenter de cr√©er un nouvel √©v√©nement
            success = await unified_event_manager.add_event(
                100004,
                channel_id=env["mock_channel"].id,
                guild_id=env["guild"].guild_id,
                title="√âv√©nement avec Erreur",
                interval_minutes=60.0
            )
            
            # L'op√©ration devrait √©chouer gracieusement
            assert not success, "La cr√©ation devrait √©chouer avec l'erreur simul√©e"
        
        # 4. V√©rifier que le syst√®me r√©cup√®re apr√®s l'erreur
        success = await unified_event_manager.add_event(
            100005,
            channel_id=env["mock_channel"].id,
            guild_id=env["guild"].guild_id,
            title="√âv√©nement de R√©cup√©ration",
            interval_minutes=60.0
        )
        assert success, "Le syst√®me devrait r√©cup√©rer apr√®s l'erreur"

    @pytest.mark.asyncio
    async def test_complex_multi_user_scenario(self, setup_reminder_environment):
        """
        Test un sc√©nario complexe avec plusieurs utilisateurs et √©v√©nements.
        
        V√©rifie :
        1. Gestion simultan√©e de plusieurs √©v√©nements
        2. R√©actions de multiples utilisateurs
        3. Conflits et r√©solution
        4. Performance avec charge simul√©e
        """
        env = setup_reminder_environment
        
        # Cr√©er plusieurs utilisateurs suppl√©mentaires
        additional_users = []
        for i in range(5, 10):  # Utilisateurs 5-9
            user = User.create(
                user_id=i * 111111111,
                username=f"user{i}",
                display_name=f"User {i}"
            )
            additional_users.append(user)
        
        all_users = env["users"] + additional_users
        
        # Cr√©er plusieurs √©v√©nements simultan√©s
        events = []
        for i in range(5):
            event = Event.create(
                message_id=200000 + i,
                channel_id=env["mock_channel"].id,
                guild=env["guild"],
                title=f"√âv√©nement Multi-Users {i+1}",
                description=f"Test de charge avec plusieurs utilisateurs - {i+1}",
                interval_minutes=30.0 + (i * 15),  # Intervalles vari√©s
                is_paused=False,
                required_reactions=["‚úÖ", "‚ùå", "ü§î"]
            )
            events.append(event)
            
            # Ajouter au gestionnaire
            await unified_event_manager.add_event(
                event.message_id,
                title=event.title,
                description=event.description,
                interval_minutes=event.interval_minutes
            )
        
        # Simuler des r√©actions massives et simultan√©es
        tasks = []
        
        async def add_reaction_task(event, user, emoji):
            """T√¢che asynchrone pour ajouter une r√©action."""
            try:
                reaction = Reaction.create(
                    event=event,
                    user=user,
                    emoji=emoji,
                    added_at=datetime.now()
                )
                return True
            except Exception:
                return False
        
        # Cr√©er des t√¢ches pour tous les utilisateurs sur tous les √©v√©nements
        for event in events:
            for user in all_users:
                emoji = ["‚úÖ", "‚ùå", "ü§î"][user.user_id % 3]
                task = add_reaction_task(event, user, emoji)
                tasks.append(task)
        
        # Ex√©cuter toutes les t√¢ches en parall√®le
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # V√©rifier les r√©sultats
        successful_reactions = sum(1 for r in results if r is True)
        total_expected = len(events) * len(all_users)
        
        assert successful_reactions >= total_expected * 0.9, \
            f"Au moins 90% des r√©actions devraient r√©ussir (obtenu: {successful_reactions}/{total_expected})"
        
        # V√©rifier la coh√©rence des donn√©es
        for event in events:
            reactions_count = Reaction.select().where(Reaction.event == event).count()
            assert reactions_count >= len(all_users) * 0.9, \
                f"Chaque √©v√©nement devrait avoir au moins 90% des r√©actions attendues"
        
        # Test de performance : v√©rifier que le syst√®me r√©pond rapidement
        start_time = datetime.now()
        
        # Op√©ration de lecture intensive
        for event in events:
            reactions = list(Reaction.select().where(Reaction.event == event))
            assert len(reactions) > 0, "Chaque √©v√©nement devrait avoir des r√©actions"
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # Le syst√®me devrait r√©pondre en moins d'1 seconde pour cette charge
        assert duration < 1.0, f"Les op√©rations de lecture devraient √™tre rapides (dur√©e: {duration}s)"

    @pytest.mark.asyncio
    async def test_error_recovery_and_resilience(self, setup_reminder_environment):
        """
        Test la r√©cup√©ration d'erreurs et la r√©silience du syst√®me.
        
        V√©rifie :
        1. R√©cup√©ration apr√®s pannes de r√©seau simul√©es
        2. Gestion des timeouts
        3. Reprise automatique des op√©rations
        4. Int√©grit√© des donn√©es apr√®s erreurs
        """
        env = setup_reminder_environment
        
        # Cr√©er un √©v√©nement de test
        event = Event.create(
            message_id=300001,
            channel_id=env["mock_channel"].id,
            guild=env["guild"],
            title="Test de R√©silience",
            description="Test de r√©cup√©ration d'erreurs",
            interval_minutes=60.0,
            is_paused=False,
            required_reactions=["‚úÖ"]
        )
        
        # 1. Test de r√©cup√©ration apr√®s erreur de r√©seau
        with patch('utils.unified_event_manager.unified_event_manager._storage_adapter') as mock_adapter:
            # Simuler un √©chec de sauvegarde
            mock_adapter.save_data.side_effect = Exception("Erreur r√©seau simul√©e")
            
            # Tenter d'ajouter l'√©v√©nement
            success = await unified_event_manager.add_event(
                event.message_id,
                title=event.title,
                description=event.description
            )
            
            # L'op√©ration devrait √©chouer mais ne pas crasher
            assert not success, "L'op√©ration devrait √©chouer avec l'erreur simul√©e"
        
        # 2. V√©rifier que le syst√®me r√©cup√®re
        # R√©tablir le comportement normal
        success = await unified_event_manager.add_event(
            event.message_id,
            title=event.title,
            description=event.description,
            interval_minutes=event.interval_minutes
        )
        assert success, "Le syst√®me devrait r√©cup√©rer apr√®s l'erreur"
        
        # 3. Test de timeout et retry
        with patch('asyncio.sleep') as mock_sleep:
            # Mock du sleep pour acc√©l√©rer les tests
            mock_sleep.return_value = asyncio.create_task(asyncio.sleep(0.001))
            
            with patch('utils.reminder_manager.reminder_manager.send_reminder') as mock_send:
                # Simuler des timeouts puis un succ√®s
                mock_send.side_effect = [
                    asyncio.TimeoutError("Timeout 1"),
                    asyncio.TimeoutError("Timeout 2"), 
                    True  # Succ√®s au 3√®me essai
                ]
                
                # Le syst√®me devrait retry et finalement r√©ussir
                # Note: La logique de retry doit √™tre impl√©ment√©e dans reminder_manager
                result = await reminder_manager.send_reminder(event.message_id)
                
                # V√©rifier que plusieurs tentatives ont √©t√© faites
                assert mock_send.call_count >= 1, "Au moins une tentative devrait √™tre faite"
        
        # 4. V√©rifier l'int√©grit√© des donn√©es apr√®s erreurs
        final_event = Event.get_by_id(event.id)
        assert final_event.title == "Test de R√©silience"
        assert final_event.is_paused is False


@pytest.mark.integration
class TestReminderFlowsExtended:
    """
    Tests d'int√©gration √©tendus pour cas complexes et edge cases.
    """

    @pytest.mark.asyncio
    async def test_concurrent_operations(self, setup_reminder_environment):
        """Test les op√©rations concurrentes sur les √©v√©nements."""
        env = setup_reminder_environment
        
        event = Event.create(
            message_id=400001,
            channel_id=env["mock_channel"].id,
            guild=env["guild"],
            title="Test Concurrence",
            interval_minutes=60.0,
        )
        
        async def _create_reaction_async(self, event, user, emoji):
            """M√©thode helper pour cr√©er une r√©action de mani√®re asynchrone."""
            return Reaction.create(
                event=event,
                user=user,
                emoji=emoji,
                added_at=datetime.now()
            )
        
        # Op√©rations concurrentes
        async def concurrent_add_reactions():
            tasks = []
            for i in range(10):
                user = User.create(
                    user_id=500000 + i,
                    username=f"concurrent_user_{i}"
                )
                task = asyncio.create_task(
                    self._create_reaction_async(event, user, "‚úÖ")
                )
                tasks.append(task)
            
            await asyncio.gather(*tasks, return_exceptions=True)
        
        # Ex√©cuter les op√©rations concurrentes
        await concurrent_add_reactions()
        
        # V√©rifier l'int√©grit√©
        final_count = Reaction.select().where(Reaction.event == event).count()
        assert final_count == 10, "Toutes les r√©actions concurrentes devraient √™tre enregistr√©es"

    @pytest.mark.asyncio 
    async def test_data_migration_during_operations(self, setup_reminder_environment):
        """Test la migration de donn√©es pendant des op√©rations actives."""
        env = setup_reminder_environment
        
        # Cr√©er des √©v√©nements avant migration
        pre_migration_events = []
        for i in range(3):
            event = Event.create(
                message_id=500000 + i,
                channel_id=env["mock_channel"].id,
                guild=env["guild"],
                title=f"Pr√©-Migration {i}",
                interval_minutes=60.0 + i * 30
            )
            pre_migration_events.append(event)
        
        # Simuler une migration de donn√©es
        with patch('utils.unified_event_manager.unified_event_manager._handle_backend_switch') as mock_switch:
            mock_switch.return_value = True
            
            # D√©clencher une op√©ration qui pourrait causer un switch
            await unified_event_manager._handle_backend_switch()
        
        # V√©rifier que tous les √©v√©nements existent toujours
        for event in pre_migration_events:
            reloaded_event = Event.get_by_id(event.id)
            assert reloaded_event.title == event.title
            assert reloaded_event.interval_minutes == event.interval_minutes