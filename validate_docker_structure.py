#!/usr/bin/env python3
"""
Script de validation de la structure modulaire pour Docker.
Ce script teste que tous les modules peuvent √™tre import√©s (structure uniquement).
"""

import sys
import os
import importlib.util
from pathlib import Path

def check_module_structure():
    """V√©rifie que tous les modules ont une structure Python valide."""

    modules_to_check = [
        'commands/__init__.py',
        'config/__init__.py',
        'config/settings.py',
        'models/__init__.py',
        'models/reminder.py',
        'persistence/__init__.py',
        'persistence/storage.py',
        'utils/__init__.py',
        'utils/logging_config.py',
        'utils/message_parser.py',
        'utils/migration.py',
        'utils/permissions.py',
        'bot.py'
    ]

    print("üîç V√©rification de la structure modulaire...")

    errors = []

    for module_path in modules_to_check:
        full_path = Path(module_path)

        if not full_path.exists():
            errors.append(f"‚ùå Fichier manquant: {module_path}")
            continue

        # Test de compilation syntaxique
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()

            compile(content, str(full_path), 'exec')
            print(f"‚úÖ {module_path}")

        except SyntaxError as e:
            errors.append(f"‚ùå Erreur de syntaxe dans {module_path}: {e}")
        except Exception as e:
            errors.append(f"‚ùå Erreur dans {module_path}: {e}")

    if errors:
        print("\n‚ùå Erreurs d√©tect√©es:")
        for error in errors:
            print(f"  {error}")
        return False
    else:
        print("\n‚úÖ Tous les modules ont une structure valide!")
        return True

def check_dockerfile_files():
    """V√©rifie que les fichiers n√©cessaires pour Docker sont pr√©sents."""

    required_files = [
        'Dockerfile',
        'docker-compose.yml',
        'requirements.txt',
        '.dockerignore'
    ]

    print("\nüê≥ V√©rification des fichiers Docker...")

    missing_files = []

    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")

    if missing_files:
        print("\n‚ùå Fichiers manquants:")
        for file_path in missing_files:
            print(f"  ‚ùå {file_path}")
        return False
    else:
        print("\n‚úÖ Tous les fichiers Docker sont pr√©sents!")
        return True

def main():
    """Point d'entr√©e principal."""
    print("üöÄ Validation de la structure pour Docker\n")

    # Changer vers le r√©pertoire du script
    script_dir = Path(__file__).parent
    os.chdir(script_dir)

    structure_ok = check_module_structure()
    docker_files_ok = check_dockerfile_files()

    if structure_ok and docker_files_ok:
        print("\nüéâ Structure modulaire pr√™te pour Docker!")
        print("   Vous pouvez maintenant construire l'image avec: docker build -t discord-reminder-bot .")
        return 0
    else:
        print("\n‚ùå Des probl√®mes ont √©t√© d√©tect√©s. Veuillez les corriger avant de construire l'image Docker.")
        return 1

if __name__ == "__main__":
    sys.exit(main())